=begin
#Turnitin Core API

#Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

The version of the OpenAPI document: 1.0.258

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'cgi'

module TCAClient
  class GroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add attachment to a group. will create a group if it does not exist.
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param data [AddGroupAttachmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AddGroupAttachmentResponse]
    def add_group_attachment(x_turnitin_integration_name, x_turnitin_integration_version, group_id, data, opts = {})
      data, _status_code, _headers = add_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, data, opts)
      data
    end

    # Add attachment to a group. will create a group if it does not exist.
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param data [AddGroupAttachmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddGroupAttachmentResponse, Integer, Hash)>] AddGroupAttachmentResponse data, response status code and response headers
    def add_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.add_group_attachment ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.add_group_attachment"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.add_group_attachment"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.add_group_attachment"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling GroupsApi.add_group_attachment"
      end
      # resource path
      local_var_path = '/groups/{group_id}/attachments'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'AddGroupAttachmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.add_group_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#add_group_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Hard delete group attachment
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_group_attachment(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, opts = {})
      delete_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, opts)
      nil
    end

    # Hard delete group attachment
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.delete_group_attachment ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.delete_group_attachment"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.delete_group_attachment"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.delete_group_attachment"
      end
      # verify the required parameter 'attach_id' is set
      if @api_client.config.client_side_validation && attach_id.nil?
        fail ArgumentError, "Missing the required parameter 'attach_id' when calling GroupsApi.delete_group_attachment"
      end
      # resource path
      local_var_path = '/groups/{group_id}/attachments/{attach_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s)).sub('{' + 'attach_id' + '}', CGI.escape(attach_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.delete_group_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#delete_group_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get group, group context and group context owners info
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param [Hash] opts the optional parameters
    # @return [AggregateGroup]
    def get_group(x_turnitin_integration_name, x_turnitin_integration_version, group_id, opts = {})
      data, _status_code, _headers = get_group_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, opts)
      data
    end

    # Get group, group context and group context owners info
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregateGroup, Integer, Hash)>] AggregateGroup data, response status code and response headers
    def get_group_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_group ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.get_group"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.get_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_group"
      end
      # resource path
      local_var_path = '/groups/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AggregateGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.get_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get group attachment
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param [Hash] opts the optional parameters
    # @return [GroupAttachmentResponse]
    def get_group_attachment(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, opts = {})
      data, _status_code, _headers = get_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, opts)
      data
    end

    # Get group attachment
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupAttachmentResponse, Integer, Hash)>] GroupAttachmentResponse data, response status code and response headers
    def get_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_group_attachment ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.get_group_attachment"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.get_group_attachment"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_group_attachment"
      end
      # verify the required parameter 'attach_id' is set
      if @api_client.config.client_side_validation && attach_id.nil?
        fail ArgumentError, "Missing the required parameter 'attach_id' when calling GroupsApi.get_group_attachment"
      end
      # resource path
      local_var_path = '/groups/{group_id}/attachments/{attach_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s)).sub('{' + 'attach_id' + '}', CGI.escape(attach_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GroupAttachmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.get_group_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all attachments
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param [Hash] opts the optional parameters
    # @return [GetGroupAttachments200Response]
    def get_group_attachments(x_turnitin_integration_name, x_turnitin_integration_version, group_id, opts = {})
      data, _status_code, _headers = get_group_attachments_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, opts)
      data
    end

    # Get all attachments
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetGroupAttachments200Response, Integer, Hash)>] GetGroupAttachments200Response data, response status code and response headers
    def get_group_attachments_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.get_group_attachments ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.get_group_attachments"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.get_group_attachments"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.get_group_attachments"
      end
      # resource path
      local_var_path = '/groups/{group_id}/attachments'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetGroupAttachments200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.get_group_attachments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#get_group_attachments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # upsert group, group context and group context owners info
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param data [AggregateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [AggregateGroup]
    def groups_group_id_put(x_turnitin_integration_name, x_turnitin_integration_version, group_id, data, opts = {})
      data, _status_code, _headers = groups_group_id_put_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, data, opts)
      data
    end

    # upsert group, group context and group context owners info
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param data [AggregateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AggregateGroup, Integer, Hash)>] AggregateGroup data, response status code and response headers
    def groups_group_id_put_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.groups_group_id_put ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.groups_group_id_put"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.groups_group_id_put"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.groups_group_id_put"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling GroupsApi.groups_group_id_put"
      end
      # resource path
      local_var_path = '/groups/{group_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'AggregateGroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.groups_group_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#groups_group_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch a group attachment
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param data [AddGroupAttachmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GroupAttachmentResponse]
    def update_group_attachment(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, data, opts = {})
      data, _status_code, _headers = update_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, data, opts)
      data
    end

    # Patch a group attachment
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] group_id
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param data [AddGroupAttachmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupAttachmentResponse, Integer, Hash)>] GroupAttachmentResponse data, response status code and response headers
    def update_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.update_group_attachment ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.update_group_attachment"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.update_group_attachment"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.update_group_attachment"
      end
      # verify the required parameter 'attach_id' is set
      if @api_client.config.client_side_validation && attach_id.nil?
        fail ArgumentError, "Missing the required parameter 'attach_id' when calling GroupsApi.update_group_attachment"
      end
      # verify the required parameter 'data' is set
      if @api_client.config.client_side_validation && data.nil?
        fail ArgumentError, "Missing the required parameter 'data' when calling GroupsApi.update_group_attachment"
      end
      # resource path
      local_var_path = '/groups/{group_id}/attachments/{attach_id}'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s)).sub('{' + 'attach_id' + '}', CGI.escape(attach_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(data)

      # return_type
      return_type = opts[:debug_return_type] || 'GroupAttachmentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.update_group_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#update_group_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload Submitted File
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] The Group ID (required to already exist) 
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param content_disposition [String] *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60; 
    # @param file [Object] the attachment file
    # @param [Hash] opts the optional parameters
    # @return [SuccessMessage]
    def upload_group_attachment(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, content_disposition, file, opts = {})
      data, _status_code, _headers = upload_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, content_disposition, file, opts)
      data
    end

    # Upload Submitted File
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param group_id [String] The Group ID (required to already exist) 
    # @param attach_id [String] The attachment ID (returned from a successful group attachment request) 
    # @param content_disposition [String] *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60; 
    # @param file [Object] the attachment file
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessMessage, Integer, Hash)>] SuccessMessage data, response status code and response headers
    def upload_group_attachment_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, group_id, attach_id, content_disposition, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GroupsApi.upload_group_attachment ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling GroupsApi.upload_group_attachment"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling GroupsApi.upload_group_attachment"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling GroupsApi.upload_group_attachment"
      end
      # verify the required parameter 'attach_id' is set
      if @api_client.config.client_side_validation && attach_id.nil?
        fail ArgumentError, "Missing the required parameter 'attach_id' when calling GroupsApi.upload_group_attachment"
      end
      # verify the required parameter 'content_disposition' is set
      if @api_client.config.client_side_validation && content_disposition.nil?
        fail ArgumentError, "Missing the required parameter 'content_disposition' when calling GroupsApi.upload_group_attachment"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling GroupsApi.upload_group_attachment"
      end
      # resource path
      local_var_path = '/groups/{group_id}/attachments/{attach_id}/original'.sub('{' + 'group_id' + '}', CGI.escape(group_id.to_s)).sub('{' + 'attach_id' + '}', CGI.escape(attach_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['binary/octet-stream'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version
      header_params[:'Content-Disposition'] = content_disposition

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(file)

      # return_type
      return_type = opts[:debug_return_type] || 'SuccessMessage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"GroupsApi.upload_group_attachment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GroupsApi#upload_group_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
