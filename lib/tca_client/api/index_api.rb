=begin
#Turnitin Core API

#Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 

The version of the OpenAPI document: 1.0.258

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'cgi'

module TCAClient
  class IndexApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return index state of submission
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param id [String] The Submission ID (returned upon a successful POST to /submissions) 
    # @param [Hash] opts the optional parameters
    # @return [IndexStateSettings]
    def get_index_status(x_turnitin_integration_name, x_turnitin_integration_version, id, opts = {})
      data, _status_code, _headers = get_index_status_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, id, opts)
      data
    end

    # Return index state of submission
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param id [String] The Submission ID (returned upon a successful POST to /submissions) 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IndexStateSettings, Integer, Hash)>] IndexStateSettings data, response status code and response headers
    def get_index_status_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.get_index_status ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling IndexApi.get_index_status"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling IndexApi.get_index_status"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IndexApi.get_index_status"
      end
      # resource path
      local_var_path = '/submissions/{id}/index'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IndexStateSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndexApi.get_index_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_index_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Index and return index state of submission
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param id [String] The Submission ID (returned upon a successful POST to /submissions) 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :asynchronous asynchronous request
    # @return [IndexStateSettings]
    def index_submission(x_turnitin_integration_name, x_turnitin_integration_version, id, opts = {})
      data, _status_code, _headers = index_submission_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, id, opts)
      data
    end

    # Index and return index state of submission
    # @param x_turnitin_integration_name [String] a human readable string representing the type of integration being used
    # @param x_turnitin_integration_version [String] the version of the integration platform being used
    # @param id [String] The Submission ID (returned upon a successful POST to /submissions) 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :asynchronous asynchronous request
    # @return [Array<(IndexStateSettings, Integer, Hash)>] IndexStateSettings data, response status code and response headers
    def index_submission_with_http_info(x_turnitin_integration_name, x_turnitin_integration_version, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: IndexApi.index_submission ...'
      end
      # verify the required parameter 'x_turnitin_integration_name' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_name.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_name' when calling IndexApi.index_submission"
      end
      # verify the required parameter 'x_turnitin_integration_version' is set
      if @api_client.config.client_side_validation && x_turnitin_integration_version.nil?
        fail ArgumentError, "Missing the required parameter 'x_turnitin_integration_version' when calling IndexApi.index_submission"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling IndexApi.index_submission"
      end
      # resource path
      local_var_path = '/submissions/{id}/index'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'asynchronous'] = opts[:'asynchronous'] if !opts[:'asynchronous'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Turnitin-Integration-Name'] = x_turnitin_integration_name
      header_params[:'X-Turnitin-Integration-Version'] = x_turnitin_integration_version

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IndexStateSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api_key']

      new_options = opts.merge(
        :operation => :"IndexApi.index_submission",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#index_submission\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
